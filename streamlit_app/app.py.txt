import streamlit as st
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime

st.set_page_config(layout="wide")
st.title("📈 台股模擬交易 App")

# 可選股票
stocks = {
    '台積電': '2330.TW',
    '鴻海': '2317.TW',
    '聯發科': '2454.TW',
    '台達電': '2308.TW',
    '富邦金': '2881.TW'
}
stock_names = list(stocks.keys())

# session state 初始化
if "portfolio" not in st.session_state:
    st.session_state.portfolio = {}

# 左側欄位 - 下單操作
with st.sidebar:
    st.header("🛒 下單操作")
    selected_stock = st.selectbox("選擇股票", stock_names)
    stock_symbol = stocks[selected_stock]
    quantity = st.number_input("輸入股數", min_value=1, value=100)
    action = st.radio("操作", ["買入", "賣出"])

    stock_data = yf.Ticker(stock_symbol).info
    current_price = stock_data.get("regularMarketPrice", 0)

    if st.button("確認下單"):
        if selected_stock not in st.session_state.portfolio:
            st.session_state.portfolio[selected_stock] = {
                "symbol": stock_symbol,
                "quantity": 0,
                "avg_price": current_price
            }

        position = st.session_state.portfolio[selected_stock]
        if action == "買入":
            total_cost = position["quantity"] * position["avg_price"] + quantity * current_price
            position["quantity"] += quantity
            position["avg_price"] = total_cost / position["quantity"]
            st.success(f"✅ 已買入 {quantity} 股 {selected_stock}")
        elif action == "賣出":
            if quantity > position["quantity"]:
                st.warning("⚠️ 賣出股數超過持有數量")
            else:
                position["quantity"] -= quantity
                st.success(f"✅ 已賣出 {quantity} 股 {selected_stock}")
                if position["quantity"] == 0:
                    del st.session_state.portfolio[selected_stock]

# 右側主頁
col1, col2 = st.columns([1, 2])

# 左側顯示持股
with col1:
    st.subheader("📦 我的投資組合")
    if st.session_state.portfolio:
        for name, data in st.session_state.portfolio.items():
            live_price = yf.Ticker(data["symbol"]).info.get("regularMarketPrice", 0)
            total_value = data["quantity"] * live_price
            st.markdown(f"**{name}**")
            st.write(f"持股數量：{data['quantity']}")
            st.write(f"平均成本：{data['avg_price']:.2f}")
            st.write(f"現值：${total_value:,.0f}")
            st.divider()
    else:
        st.info("尚未持有任何股票")

# 右側顯示股價圖與大盤指數
with col2:
    st.subheader(f"📊 {selected_stock} 走勢圖（近一個月）")
    df = yf.Ticker(stock_symbol).history(period="1mo")
    if not df.empty:
        fig, ax = plt.subplots()
        ax.plot(df.index, df["Close"])
        ax.set_xlabel("日期")
        ax.set_ylabel("收盤價")
        ax.set_title(f"{selected_stock}（{stock_symbol}）")
        ax.tick_params(axis='x', rotation=45)
        st.pyplot(fig)
    else:
        st.warning("查無資料")

    st.subheader("📉 台股大盤 (^TWII) 指數")
    twii = yf.Ticker("^TWII").history(period="1mo")
    if not twii.empty:
        fig2, ax2 = plt.subplots()
        ax2.plot(twii.index, twii["Close"], color='green')
        ax2.set_title("台灣加權股價指數 (近一月)")
        ax2.set_xlabel("日期")
        ax2.set_ylabel("收盤價")
        ax2.tick_params(axis='x', rotation=45)
        st.pyplot(fig2)
    else:
        st.warning("無法載入大盤資料")
